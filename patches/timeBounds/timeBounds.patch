This patch sets up Jena to automatically generate earliest time and latest time
properties for hemlRdf:SimpleDate, hemlRDF:DateRange, hemlRDF:TerminusAnteQuem
and hemlRDF:TerminusPostQuem properties as they are inserted into a graph. This
feature can be enabled and dissabled by calling timeBoundsGeneration( boolean
enabled ) on your graph object. The default enabledness can be set in
com.hp.hpl.jena.HemlConstants.

Note that this feature depends on your graph being an extension of the
GraphBase object, which is true for all graphs already in Jena.

Note also that this depends on an external jar file which handles the parsing of
these dates (cocoon-heml-block.jar) which must be placed in Jena's lib
directory.

Instructions to apply this patch:
  * Copy cocoon-heml-block.jar into Jena's lib directory
  * Copy this patch file into Jena's src directory
  * cd into Jena's src directory
  * run 'patch -p1 -i timeBounds.patch
  * Remove the patch file
  * cd into Jena's root directory and build jena (run 'ant')

The new Jena jar file will now be in Jena's lib folder.
diff -ruN /home/ajwood/Desktop/Jena-2.5.7/src/com/hp/hpl/jena/graph/impl/GraphBase.java src/com/hp/hpl/jena/graph/impl/GraphBase.java
--- /home/ajwood/Desktop/Jena-2.5.7/src/com/hp/hpl/jena/graph/impl/GraphBase.java	2008-12-05 15:30:02.000000000 -0400
+++ src/com/hp/hpl/jena/graph/impl/GraphBase.java	2009-07-02 10:59:53.000000000 -0300
@@ -6,6 +6,7 @@
 
 package com.hp.hpl.jena.graph.impl;
 
+import com.hp.hpl.jena.HemlConstants;
 import com.hp.hpl.jena.graph.*;
 import com.hp.hpl.jena.graph.query.*;
 import com.hp.hpl.jena.util.iterator.*;
@@ -42,6 +43,17 @@
     */
     protected boolean closed = false;
 
+	/**
+		 This listener watches for simple dates being inserted into the graph.
+		 It will try to parse out the date to generate terminus post quem (a
+		 start time, in milliseconds) and a terminus ante quem (an end time, in
+		 milliseconds) which is then inserted into the graph with
+		 &lt;http://www.heml.org/rdf/2003-09-17/heml#TerminusPostQuem&gt; and
+		 &lt;http://www.heml.org/rdf/2003-09-17/heml#TerminusAnteQuem&gt; acting
+		 as the predicate.
+	 */
+	protected final HemlDateListener timeBoundsListener;
+
     /**
          Initialise this graph as one with reification style Minimal.
     */
@@ -53,7 +65,11 @@
          the reifier when it is created).
     */
     public GraphBase( ReificationStyle style )
-        { this.style = style; }
+        { this.style = style; 
+			timeBoundsListener = new HemlDateListener();
+			if ( HemlConstants.includeTimeBounds )
+				getEventManager().register( timeBoundsListener );
+		}
         
     /**
          Utility method: throw a ClosedException if this graph has been closed.
@@ -199,7 +215,7 @@
         performAdd( t );
         notifyAdd( t );
         }
-    
+
     /**
          Add a triple to the triple store. The default implementation throws an
          AddDeniedException; subclasses must override if they want to be able to
@@ -436,6 +452,20 @@
 		return b.toString();
 	   }
 
+	/**
+		Enables/disables terminus post/ante quem tag generation for simple dates
+		on insert into this graph.
+	 */
+	public void timeBoundsGeneration( boolean enabled ){
+		// We always unregister first to avoid unwanted multiplicities 
+		getEventManager().unregister( timeBoundsListener );
+
+		// Reregister if enabled
+		if ( enabled ) 
+			getEventManager().register( timeBoundsListener );
+	}
+
+
 }
 
 /*
diff -ruN /home/ajwood/Desktop/Jena-2.5.7/src/com/hp/hpl/jena/graph/impl/HemlDateListener.java src/com/hp/hpl/jena/graph/impl/HemlDateListener.java
--- /home/ajwood/Desktop/Jena-2.5.7/src/com/hp/hpl/jena/graph/impl/HemlDateListener.java	1969-12-31 20:00:00.000000000 -0400
+++ src/com/hp/hpl/jena/graph/impl/HemlDateListener.java	2009-07-02 11:47:35.000000000 -0300
@@ -0,0 +1,452 @@
+package com.hp.hpl.jena.graph.impl;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.heml.chronology.parse.*;
+
+import com.hp.hpl.jena.graph.*;
+import com.hp.hpl.jena.datatypes.*;
+import java.util.List;
+import java.util.LinkedList;
+import java.util.Iterator;
+
+/**
+ * Generates hemlRDF:EarliestTime and hemlRDF:LatestTime triples for
+ * hemlRDF:SimpleDate, hemlRDF:DateRange, hemlRDF:TerminusPostQuem and
+ * hemlRDF:TerminusAnteQuem triples as they are inserted into the graph.
+ */
+public class HemlDateListener implements GraphListener{
+
+	/** Change to true to see more debugging statements */
+	private final boolean debug = false;
+
+	/** Nodes used throughout triple generation */
+	private static final Node earliestTimeURI = Node.createURI(
+			"http://www.heml.org/rdf/2003-09-17/heml#EarliestTime");
+	private static Node latestTimeURI = Node.createURI(
+			"http://www.heml.org/rdf/2003-09-17/heml#LatestTime");
+	private static final Node StartingDateURI = Node.createURI(
+			"http://www.heml.org/rdf/2003-09-17/heml#StartingDate");
+	private static final Node EndingDateURI = Node.createURI(
+			"http://www.heml.org/rdf/2003-09-17/heml#EndingDate");
+
+	/**
+	 * A triple <code>t</code> of the form '?subject hemlRDF:DateRange _:b0'
+	 * will only be processed to have earliest and latest times generated if both 
+	 * _:b0 hemlRDF:StartingDate "****"^^&lt;http://example.com/rdf#datetype&gt; and
+	 * _:b0 helmRDF:EndingDate "****""^^&lt;http://example.com/rdf#datetype&gt; have
+	 * already been inserted in our graph. If the required triples do not yet exist,
+	 * we keep <code>t</code> here. As triples are inserted into our graph, we
+	 * check to see if the triples have been added, allowing us to process
+	 * <code>t</code>.
+	 */
+	private List DateRangeCache;
+
+	public HemlDateListener() {
+		DateRangeCache = new LinkedList();
+	}
+
+	/** Method called when a single triple has been added to the graph. */
+	public void notifyAddTriple( Graph g, Triple t ){
+
+		if ( DateRangeCache.size() > 0 )
+			processDateRangeCache( g );
+
+		Node subject = t.getSubject();
+		Node predicate = t.getPredicate();
+		Node object = t.getObject();
+
+		// we are only interested in predicates
+		if ( ! (predicate instanceof Node_URI) ) return;
+
+
+		// If we need these, we will set them
+		Long earliestTime = null;
+		Long latestTime = null;
+
+		if ( predicate.hasURI("http://www.heml.org/rdf/2003-09-17/heml#SimpleDate") ){
+			// hemlRDF:SimpleDate as predicate
+
+			if ( ! ( object instanceof Node_Literal )) return;
+
+			String value = ((Node_Literal) object ).getLiteralLexicalForm();
+			String dataType = ((Node_Literal) object ).getLiteralDatatypeURI();
+
+			earliestTime = getEarliestTime(value, dataType);
+			latestTime = getLatestTime(value, dataType); 
+		}
+		else if ( predicate.hasURI("http://www.heml.org/rdf/2003-09-17/heml#TerminusPostQuem") ){
+			// hemlRDF:TerminusPostQuem as predicate
+
+			if ( ! (object instanceof Node_Literal) ) return;
+
+			String value = object.getLiteralLexicalForm();
+			String dataType = object.getLiteralDatatypeURI();
+
+			earliestTime = getEarliestTime(value, dataType);
+		}
+		else if ( predicate.hasURI("http://www.heml.org/rdf/2003-09-17/heml#TerminusAnteQuem") ){
+			// hemlRDF:TerminusAnteQuem as predicate
+			
+			if ( ! (object instanceof Node_Literal) ) return;
+
+			String value = object.getLiteralLexicalForm();
+			String dataType = object.getLiteralDatatypeURI();
+
+			latestTime = getLatestTime(value, dataType);
+		}
+		else if ( predicate.hasURI("http://www.heml.org/rdf/2003-09-17/heml#DateRange") ){
+			// We should have a blank node '_:b0' as our object. Our graph should
+			// contain the triples
+			//   _:b0 hemlRDF:StartingDate "****"^^<http://www.example.com/rdf#date-type>
+			//   _:b0 hemlRDF:EndingDate "****"^^<http://www.example.com/rdf#date-type>
+			//   If it does not, we store this triple and wait until we have the
+			//   start *and* end dates for our range. Note that if a graph
+			//   results in containing a hemlRDF:DateRange that doesn't have
+			//   both the start and end dates specified, earliest and latest
+			//   times are not generated for that date range.
+
+			if ( ! ( object instanceof Node_Blank ) ) return;
+
+			Triple[] rangeBounds = canProcessDateRange( g, object );
+
+			if ( rangeBounds == null ){
+				DateRangeCache.add(t);
+				return;
+			}
+			else{
+				processDateRange( g, rangeBounds[0], rangeBounds[1] );
+				// we generate the required triples in processDateRange so we return here
+				return; 
+			}
+		}
+
+		// if no need to continue
+		if ( earliestTime == null && latestTime == null ) return;
+
+		//unregister this from the event manager to avoid nasty recursion
+		g.getEventManager().unregister( this );
+
+		// if we have an earliest time, add it
+		if ( earliestTime != null ){
+			Node earliestTimeObject = Node.createLiteral(
+					earliestTime.toString(),
+					"", 
+					com.hp.hpl.jena.datatypes.xsd.XSDDatatype.XSDinteger);
+
+			g.add( Triple.create(subject, earliestTimeURI, earliestTimeObject) );
+		}
+		// if we have a latest time, add it
+		if ( latestTime != null ){
+			Node latestTimeObject = Node.createLiteral(
+					latestTime.toString(),
+					"", 
+					com.hp.hpl.jena.datatypes.xsd.XSDDatatype.XSDinteger);
+
+			g.add( Triple.create(subject, latestTimeURI, latestTimeObject) );
+		}
+
+		g.getEventManager().register( this );
+	}
+
+	/**
+	 * Iterate over DateRangeCach, processing triples if possible.
+	 */
+	private void processDateRangeCache( Graph g ){
+		Triple tripleDateRange;
+		Triple[] bounds;
+
+		for ( int i=0; i<DateRangeCache.size(); i++ ){
+			tripleDateRange = (Triple)DateRangeCache.get(i);
+
+			bounds = canProcessDateRange( g, tripleDateRange.getObject() );
+
+			if ( bounds != null ){
+				processDateRange( g, bounds[0], bounds[1] );
+				DateRangeCache.remove( tripleDateRange );
+			}
+		}
+	}
+	
+	/**
+	 * Process triples <code>start</code> and <code>end</code> as the start and
+	 * end times for a hemlRDF:DateRange. 
+	 * TODO: check for input sanity
+	 */
+	public void processDateRange( Graph g, Triple start, Triple end ){
+		//unregister this from the event manager to avoid nasty recursion
+		g.getEventManager().unregister( this );
+
+		// generate earliest time
+		String startValue = start.getObject().getLiteralLexicalForm();
+		String startDataType = start.getObject().getLiteralDatatypeURI();
+
+		Long earliestTime = getEarliestTime(startValue, startDataType);
+
+		Node earliestTimeObject = Node.createLiteral(
+				earliestTime.toString(),
+				"", 
+				com.hp.hpl.jena.datatypes.xsd.XSDDatatype.XSDinteger);
+
+		g.add( Triple.create(start.getSubject(), earliestTimeURI, earliestTimeObject) );
+
+		// generate latest time
+		String endValue = end.getObject().getLiteralLexicalForm();
+		String endDataType = end.getObject().getLiteralDatatypeURI();
+
+		Long latestTime = getLatestTime(endValue, endDataType); 
+
+		Node latestTimeObject = Node.createLiteral(
+				latestTime.toString(),
+				"", 
+				com.hp.hpl.jena.datatypes.xsd.XSDDatatype.XSDinteger);
+
+		g.add( Triple.create(end.getSubject(), latestTimeURI, latestTimeObject) );
+
+		// reregister this with the event manager
+		g.getEventManager().register( this );
+	}
+
+    /**
+        Method called when an array of triples has been added to the graph.
+    */
+    public void notifyAddArray( Graph g, Triple [] triples ){
+		for ( int i=0; i<triples.length; i++ ){
+			notifyAddTriple( g, triples[i] );
+		}
+	}
+    
+    /**
+        Method called when a list [of triples] has been added to the graph.
+    */
+    public void notifyAddList( Graph g, List triples ){
+		for ( int i=0; i<triples.size(); i++){
+			notifyAddTriple( g, (Triple)triples.get(i) );
+		}
+	}
+    
+    /**
+        Method called when an iterator [of triples] has been added to the graph
+    */
+    public void notifyAddIterator( Graph g, Iterator it ){
+		while ( it.hasNext() ){
+			notifyAddTriple( g, (Triple) it.next() );
+		}
+	}
+    
+    /**
+        Method called when another graph <code>g</code> has been used to
+        specify the triples added to our attached graph.
+    	@param g the graph of triples added
+     */
+    public void notifyAddGraph( Graph g, Graph added ){
+		Log log = LogFactory.getLog(HemlDateListener.class);
+		log.warn("notifyAddGraph( Graph g, Graph added ) not implemented - "
+				+ "earliest and latest times not added.");
+	}
+    
+    /**
+        Method called when a single triple has been deleted from the graph.
+    */
+    public void notifyDeleteTriple( Graph g, Triple t ){}
+    
+    /**
+        Method called when a list [of triples] has been deleted from the graph.
+    */
+    public void notifyDeleteList( Graph g, List L ){}
+    
+    /**
+        Method called when an array of triples has been deleted from the graph.
+    */
+    public void notifyDeleteArray( Graph g, Triple [] triples ){}
+    
+    /**
+        Method called when an iterator [of triples] has been deleted from the graph.
+    */
+    public void notifyDeleteIterator( Graph g, Iterator it ){}
+    
+    /**
+        Method to call when another graph has been used to specify the triples 
+        deleted from our attached graph. 
+    	@param g the graph of triples added
+     */
+    public void notifyDeleteGraph( Graph g, Graph removed ){}
+    
+    /**
+         method to call for a general event
+     	@param value
+     */
+    public void notifyEvent( Graph source, Object value ){}
+
+	/**
+	 * Date ranges require the following three triples:
+	 * <ol>
+	 *   <li>subject hemlRDF:DateRange _:b0
+	 *   <li>_:b0 hemlRDF:StartingDate &lt;literal date&gt;
+	 *   <li>_:b0 hemlRDF:EndingDate &lt;literal date&gt;
+	 * </ol>
+	 * This method determines if <code>g</code> is ready to process a particular
+	 * date range (i.e. ensures all three triples exist in <code>g</code>.
+	 * @param g The graph in which the triples exist.
+	 * @param subject The blank node in the above arrangement of triples.
+	 * @return A Triple[] where '_:b0 hemlRDF:StartAingDate ***' is in the 0th
+	 * and ':_b0 hemlRDF:EndingDate ***' is in the 1st position. If the graph
+	 * does not currently contain these triple, we return <code>null</code>.
+	 */
+	private Triple[] canProcessDateRange( Graph g, Node blank ){
+		Triple[] triples = new Triple[2];
+		Iterator it;
+		//TODO should we warn when we find multiples? For now, just use first.
+		it = g.find(blank, StartingDateURI, null);
+		if ( ! it.hasNext() ) return null;
+
+		triples[0] = (Triple) it.next();
+
+		it = g.find(blank, EndingDateURI, null);
+		if ( ! it.hasNext() ) return null;
+
+		triples[1] = (Triple) it.next();
+
+		return triples;
+	}
+
+	/**
+	 * @param value The string to parse as a time
+	 * @param datatype The datatype URI of which we believe <code>time</code> is
+	 * a memember.
+	 * @return The earliest time (in milliseconds) in <code>time</code>'s
+	 * interval.
+	 */
+	public Long getEarliestTime(String value, String dataType){
+		Long earliest;
+
+		//maybe we'll catch it on the else
+		if (dataType == null ) dataType = "";
+
+		if (dataType.equals("http://www.w3.org/2001/XMLSchema#gYear")) {
+			try {
+				Year yearParser = new Year();
+				return new Long(yearParser.getEarliestTime(value));
+			} catch (Exception e) {
+				if (debug) System.err.println("Failed parsing #gYear: '" + value + "': "+e+"\nNo triples added");
+				return null;
+			}
+		}
+		else if (dataType.equals("http://www.w3.org/2001/XMLSchema#date")) {
+			try {
+				return new Long(Date.getEarliestTime(value));
+			} catch (Exception e) {
+				if (debug) System.err.println("Failed parsing #date: '" + value + "': "+e+"\nNo triples added");
+				return null;
+			}
+		}
+		else if (dataType.equals("http://www.w3.org/2001/XMLSchema#dateTime")) {
+			try{
+				return new Long(DateTime.getEarliestTime(value));
+			} catch (Exception e){
+				if (debug) System.err.println("exception trying to parse #dateTime: '" + value + "': " + e);
+				if (debug) System.err.println("out of despiration, we are going to append ':00' and reparse");
+				try{
+					return new Long(DateTime.getEarliestTime(value));
+				} catch ( Exception e1 ){
+					if (debug) System.err.println("Failed parsing #dateTime: '"+value+"': " + e1 +"\nNo triples added");
+					return null;
+				}
+			}
+		}
+		else{ // we have no idea what datatype this is
+			try {
+				return new Long(DateTime.getEarliestTime(value));
+			} catch (Exception e) {
+				if (debug) System.err.println("Tried to parse '"+value+"' as datetime, but: " + e);
+				try {
+					if (debug) System.err.println ("appending ':00' and reparsing");
+					return new Long(DateTime.getEarliestTime(value + ":00"));
+				} catch (Exception e1) {
+					if (debug) System.err.println("that failed, too: " + e1);
+
+					try {
+						return new Long(Date.getEarliestTime(value));
+					} catch (Exception e2) {
+						if (debug) System.err.println("Tried to parse '"+value+"' as date, but: " + e2);
+						try {
+							Year yearParser = new Year();
+							return new Long(yearParser.getEarliestTime(value));
+						} catch (Exception e3) {
+							if (debug) System.err.println("Failed parsing date/time: '"+value+"': "+e3+"\nNo triples added");
+							return null;
+						}
+					}
+				}
+			}
+		}
+	}
+
+
+	/**
+	 * @param time The string to parse as a time
+	 * @param datatype The datatype URI of which we believe <code>time</code> is
+	 * a memember.
+	 * @return The latest time (in milliseconds) in <code>time</code>'s
+	 * interval.
+	 */
+	public Long getLatestTime(String value, String dataType){
+		if (dataType.equals("http://www.w3.org/2001/XMLSchema#gYear")) {
+			try {
+				Year yearParser = new Year();
+				return new Long(yearParser.getLatestTime(value));
+			} catch (Exception e) {
+				if (debug) System.err.println("Failed parsing #gYear: '" + value + "': "+e+"\nNo triples added");
+				return null;
+			}
+		}
+		else if (dataType.equals("http://www.w3.org/2001/XMLSchema#date")) {
+			try {
+				return new Long(Date.getLatestTime(value));
+			} catch (Exception e) {
+				if (debug) System.err.println("Failed parsing #date: '" + value + "': "+e+"\nNo triples added");
+				return null;
+			}
+		}
+		else if (dataType.equals("http://www.w3.org/2001/XMLSchema#dateTime")) {
+			try{
+				return new Long(DateTime.getLatestTime(value));
+			} catch (Exception e){
+				if (debug) System.err.println("exception trying to parse #dateTime: '" + value + "': " + e);
+				if (debug) System.err.println("out of despiration, we are going to append ':00' and reparse");
+				try{
+					return new Long(DateTime.getLatestTime(value));
+				} catch ( Exception e1 ){
+					if (debug) System.err.println("Failed parsing #dateTime: '"+value+"': " + e1 +"\nNo triples added");
+					return null;
+				}
+			}
+		}
+		else{ // we have no idea what datatype this is
+			try {
+				return new Long(DateTime.getLatestTime(value));
+			} catch (Exception e) {
+				if (debug) System.err.println("Tried to parse '"+value+"' as datetime, but: " + e);
+				try {
+					if (debug) System.err.println ("appending ':00' and reparsing");
+					return new Long(DateTime.getLatestTime(value + ":00"));
+				} catch (Exception e1) {
+					if (debug) System.err.println("that failed, too: " + e1);
+
+					try {
+						return new Long(Date.getLatestTime(value));
+					} catch (Exception e2) {
+						if (debug) System.err.println("Tried to parse '"+value+"' as date, but: " + e2);
+						try {
+							Year yearParser = new Year();
+							return new Long(yearParser.getLatestTime(value));
+						} catch (Exception e3) {
+							if (debug) System.err.println("Failed parsing date/time: '"+value+"': "+e3+"\nNo triples added");
+							return null;
+						}
+					}
+				}
+			}
+		}
+	}
+}
diff -ruN /home/ajwood/Desktop/Jena-2.5.7/src/com/hp/hpl/jena/HemlConstants.java src/com/hp/hpl/jena/HemlConstants.java
--- /home/ajwood/Desktop/Jena-2.5.7/src/com/hp/hpl/jena/HemlConstants.java	1969-12-31 20:00:00.000000000 -0400
+++ src/com/hp/hpl/jena/HemlConstants.java	2009-07-02 10:59:53.000000000 -0300
@@ -0,0 +1,16 @@
+package com.hp.hpl.jena;
+
+/**
+ * This class contains constants used in various places in Jena which are
+ * specific to its use in HEML
+ */
+public class HemlConstants{
+
+	/** 
+	 * If true, we will generate triples that represent the bounds of
+	 * hemlRDF:SimpleDate, hemlRDF:DateRange, hemlRDF:TerminusPostQuem and
+	 * hemlRDF:TerminusAnteQuem.
+	 */
+	public static final boolean includeTimeBounds = true;
+
+}
