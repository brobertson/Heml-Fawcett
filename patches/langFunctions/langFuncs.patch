This patch extends ARQ to support language matching in specialized queries. The
functions are useful when a desired resource is available in multiple languages.

The functions take a string of language codes as one of their arguments, which
is then used for matching throughout the query's execution. Languages not found
on this list can first be filtered out of the result set. Matching resources can
then be ordered based on their language's position in the language tags string.

To include these functions in a query, add 
'PREFIX myPrefix: <java:org.heml.sparql.>' to the prefixes at the start of the
query.

An example of typical usage:
PREFIX rdfs:      <http://www.w3.org/2000/01/rdf-schema#>
PREFIX langPrefs: <java:org.heml.sparql.>
PREFIX :          <http://example.com/ns#>
SELECT ?label WHERE{
   :event1 rdfs:label ?label .
   FILTER ( langPrefs:LangPrefsFilter ( ?label, "eng;en, fre/fra-ca;fr-ca" ) )
}ORDER BY ( langPrefs:LangPrefsOrder ( ?label, "eng;en, fre/fra-ca;fr-ca" ) )
LIMIT 1

Note that languages in the preferences list can contain language extensions
(e.g. en-us). A language preference with no extension will match *any* language
with the same base, regarless of the dialect extension.

Javascript utility functions to build language-based queries can be found in
sparqlLangUtil.js

Instructions to apply this patch:
  * Copy this patch file into ARQ's src directory
  * cd into ARQ's src directory
  * run 'patch -p1 -i langFunctions.patch'
  * Remove this patch file
  * cd into ARQ's root directory and build ARQ (run 'ant')

The new ARQ jar file will now be in ARQ's lib folder.
diff -ruN src-original/org/heml/sparql/LangPrefsFilter.java src/org/heml/sparql/LangPrefsFilter.java
--- src-original/org/heml/sparql/LangPrefsFilter.java	1969-12-31 20:00:00.000000000 -0400
+++ src/org/heml/sparql/LangPrefsFilter.java	2009-08-19 18:12:39.000000000 -0300
@@ -0,0 +1,61 @@
+package org.heml.sparql;
+
+import com.hp.hpl.jena.sparql.expr.ExprEvalException;
+import com.hp.hpl.jena.sparql.expr.NodeValue;
+import com.hp.hpl.jena.sparql.function.FunctionBase2;
+
+import com.hp.hpl.jena.graph.Node;
+
+/**
+ * Custom function to be used in SPARQL queries. Filters out languages that are
+ * not in our preferences list. Languages in the preferences is with no
+ * extension will match any language with the same base @see exec(NodeValue v,
+ * NodeValue langs).
+ */
+public class LangPrefsFilter extends FunctionBase2
+{	
+	public LangPrefsFilter(){}
+
+	/**
+	 * @param v A literal node with a language tag.
+	 * @param langs String representing preference of language. We must get
+	 * langs as a string of alpha-3 and alpha-2 language codes. An entry in the
+	 * string is of the following form:
+	 *    "&lt;alpha-3 code&gt;[/&lt;alpha-3 code&lt;];&lt;alpha-2 code&lt;"
+	 * Entries are comma-separated.
+	 */
+	public NodeValue exec(NodeValue v, NodeValue langs) {
+
+		String[] preferenceElements = langs.asString().split("\\s*,\\s*");
+
+		// [*][]: preference of language (lower index -> higher preference)
+		// [][*]: 0 -> 3-code
+		//        1 -> alternative 3-code (if exists)
+		//        2 -> 2-code
+		//        3 -> extension (if exists)
+		String[][] splitPreferences = new String[preferenceElements.length][4];
+
+		// split codes
+		for ( int i=0; i<splitPreferences.length; i++){
+			splitPreferences[i] = Util.splitPreferenceElement(preferenceElements[i]);
+		}
+
+		// get code we are trying to match
+		String match = NodeValue.toNode(v).getLiteralLanguage();
+		String[] splitMatch = Util.splitCode(match);
+
+		for ( int i=0; i<splitPreferences.length; i++){
+			// if ( (our preference's base matches the base of out to-match code)
+			//    AND (we have no extenstion OR the extensions match) )
+			if ( ( splitPreferences[i][0].equals(splitMatch[0]) ||
+				   splitPreferences[i][1].equals(splitMatch[0]) ||
+				   splitPreferences[i][2].equals(splitMatch[0]) ) && 
+				 ( splitPreferences[i][3].equals("") || 
+				   splitPreferences[i][3].equals(splitMatch[1]) )){
+				return NodeValue.makeBoolean(true);
+					}
+		}
+		return NodeValue.makeBoolean(false);
+	}
+}
+
diff -ruN src-original/org/heml/sparql/LangPrefsOrder.java src/org/heml/sparql/LangPrefsOrder.java
--- src-original/org/heml/sparql/LangPrefsOrder.java	1969-12-31 20:00:00.000000000 -0400
+++ src/org/heml/sparql/LangPrefsOrder.java	2009-08-10 11:42:04.000000000 -0300
@@ -0,0 +1,57 @@
+package org.heml.sparql;
+
+import com.hp.hpl.jena.sparql.expr.ExprEvalException;
+import com.hp.hpl.jena.sparql.expr.NodeValue;
+import com.hp.hpl.jena.sparql.function.FunctionBase2;
+
+import com.hp.hpl.jena.graph.Node;
+
+/**
+ * Custom function to be used in SPARQL queries. Orders literals based on input
+ * language preferences. @see exec(NodeValue v, NodeValue langs).
+ */
+public class LangPrefsOrder extends FunctionBase2
+{	
+	public LangPrefsOrder(){}
+
+	/**
+	 * @param v A literal node with a language tag.
+	 * @param langs String representing preference of language. This must be a
+	 * string of language codes separated by a comma and 0 or more whitespace
+	 * characters. 
+	 */
+	public NodeValue exec(NodeValue v, NodeValue langs) {
+
+		String[] preferenceElements = langs.asString().split("\\s*,\\s*");
+
+		// [*][]: preference of language (lower index -> higher preference)
+		// [][*]: 0 -> 3-code
+		//        1 -> alternative 3-code (if exists)
+		//        2 -> 2-code
+		//        3 -> extension (if exists)
+		String[][] splitPreferences = new String[preferenceElements.length][4];
+
+		// split codes
+		for ( int i=0; i<splitPreferences.length; i++){
+			splitPreferences[i] = Util.splitPreferenceElement(preferenceElements[i]);
+		}
+
+		// get code we are trying to match
+		String match = NodeValue.toNode(v).getLiteralLanguage();
+		String[] splitMatch = Util.splitCode(match);
+
+		for ( int i=0; i<splitPreferences[0].length; i++){
+			// if ( (our preference's base matches the base of out to-match code)
+			//    AND (we have no extenstion OR the extensions match) )
+			if ( ( splitPreferences[i][0].equals(splitMatch[0]) ||
+				   splitPreferences[i][1].equals(splitMatch[0]) ||
+				   splitPreferences[i][2].equals(splitMatch[0]) ) && 
+				 ( splitPreferences[i][3].equals("") || 
+				   splitPreferences[i][3].equals(splitMatch[1]) )){
+				return NodeValue.makeInteger(i);
+					}
+		}
+		return NodeValue.makeInteger(splitPreferences.length);
+	}
+}
+
diff -ruN src-original/org/heml/sparql/Util.java src/org/heml/sparql/Util.java
--- src-original/org/heml/sparql/Util.java	1969-12-31 20:00:00.000000000 -0400
+++ src/org/heml/sparql/Util.java	2009-08-19 19:03:52.000000000 -0300
@@ -0,0 +1,80 @@
+package org.heml.sparql;
+
+public class Util{
+
+	/**
+	 * Splits a code into a base/extension pair. If no extension exists, we
+	 * use empty string.
+	 */
+	public static String[] splitCode(String code){
+		if ( code.indexOf('-') > 0 ) return code.split("-");
+
+		else return new String[] {code, ""};
+	}
+
+	/**
+	 * Splits a code into base/extension pairs. Will use the empty string if
+	 * there is no extension.
+	 * @param code A language preference entry of the following form:
+	 *    "&lt;alpha-3 code&gt;[/&lt;alpha-3 code&lt;];&lt;alpha-2 code&lt;"
+	 * @return The above information split a length-4 array, making it easier to
+	 * work with. The returned array is of the following form:
+	 * [0] - The alpha-3 code
+	 * [1] - The alternative alpha-3 code (if exists)
+	 * [2] - The alpha-2 code
+	 * [3] - The extension (if exists)
+	 * Note that there is little sanity checking - all dialect extensions should
+	 * be the same.
+	 */
+	public static String[] splitPreferenceElement(String codes){
+		String[] returnArray = new String[4];
+
+		// get alpha-3(s) in own slot, and alpha-2 in own slot
+		String[] lengthSplit = codes.split(";");
+
+		// ====== handle alpha-3s ======
+		
+		// we set up alpha3 so that the 3-code containing the dialect extension
+		// (if one exists) is in the 0th position
+		String [] alpha3 = new String[2];
+		if ( lengthSplit[0].indexOf('/') > 0 ){
+			String[] alpha3s = lengthSplit[0].split("/");
+			alpha3[0] = alpha3s[1];
+			alpha3[1] = alpha3s[0];
+		}
+		else{
+			alpha3[0] = lengthSplit[0];
+			alpha3[1] = "";
+		}
+
+		// strip and store extension.
+		int dashIndex = alpha3[0].indexOf("-");
+
+		if ( dashIndex > 0 ){
+			returnArray[0] = alpha3[0].substring(0, dashIndex);
+			returnArray[3] = alpha3[0].substring(dashIndex + 1);
+		}
+		else{
+			returnArray[0] = alpha3[0];
+			returnArray[3] = "";
+		}
+		returnArray[1] = alpha3[1];
+
+		// ====== handle alpha-2 ======
+		if ( lengthSplit[1].equals("") ){
+			returnArray[2] = "";
+		}
+		else{
+			// TODO figure out what to do when extensions don't match
+			dashIndex = lengthSplit[1].indexOf('-');
+			if ( dashIndex > 0 ){
+				returnArray[2] = lengthSplit[1].substring(0, dashIndex);
+			}
+			else{
+				returnArray[2] = lengthSplit[1];
+			}
+		}
+
+		return returnArray;
+	}
+}
