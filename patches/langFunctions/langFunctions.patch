This patch extends ARQ to support language matching in specialized queries. The
functions are useful when a desired resource is available in multiple languages.

The functions take a string of language codes as one of their arguments, which
is then used for matching throughout the query's execution. Languages not found
on this list can first be filtered out of the result set. Matching resources can
then be ordered based on their language's position in the language tags string.

To include these functions in a query, add 
'PREFIX myPrefix: <java:org.heml.sparql.>' to the prefixes at the start of the
query.

An example of typical usage:
PREFIX rdfs:      <http://www.w3.org/2000/01/rdf-schema#>
PREFIX langPrefs: <java:org.heml.sparql.>
PREFIX :          <http://example.com/ns#>
SELECT ?label WHERE{
   :event1 rdfs:label ?label .
   FILTER ( langPrefs:LangPrefsFilter ( ?label, "en, ge, ru, la, ja" ) )
}ORDER BY ( langPrefs:LangPrefsOrder ( ?label, "en, ge, ru, la, ja" ) )
LIMIT 1

Instructions to apply this patch:
  * Copy this patch file into ARQ's src directory
  * cd into ARQ's src directory
  * run 'patch -p1 -i langFunctions.patch'
  * Remove this patch file
  * cd into ARQ's root directory and build ARQ (run 'ant')

The new ARQ jar file will now be in ARQ's lib folder.
diff -ruN src-original/org/heml/sparql/LangPrefsFilter.java src/org/heml/sparql/LangPrefsFilter.java
--- src-original/org/heml/sparql/LangPrefsFilter.java	1969-12-31 20:00:00.000000000 -0400
+++ src/org/heml/sparql/LangPrefsFilter.java	2009-07-13 11:05:19.000000000 -0300
@@ -0,0 +1,37 @@
+package org.heml.sparql;
+
+import com.hp.hpl.jena.sparql.expr.ExprEvalException;
+import com.hp.hpl.jena.sparql.expr.NodeValue;
+import com.hp.hpl.jena.sparql.function.FunctionBase2;
+
+import com.hp.hpl.jena.graph.Node;
+
+/**
+ * Custom function to be used in SPARQL queries. Filters out languages that are
+ * not in our preferences list. @see exec(NodeValue v, NodeValue langs).
+ */
+public class LangPrefsFilter extends FunctionBase2
+{	
+	public LangPrefsFilter(){}
+
+	/**
+	 * @param v A literal node with a language tag.
+	 * @param langs String representing preference of language. This must be a
+	 * string of language codes separated by a comma and 0 or more whitespace
+	 * characters. 
+	 */
+	public NodeValue exec(NodeValue v, NodeValue langs) {
+		
+		String[] langPrefs = langs.asString().split("\\s*,\\s*");
+
+		Node literal = NodeValue.toNode(v);
+
+		String value = v.asString();
+		for ( int i=0; i<langPrefs.length; i++){
+			if ( literal.getLiteralLanguage().equals(langPrefs[i])) 
+				return NodeValue.makeBoolean(true);
+		}
+		return NodeValue.makeBoolean(false);
+	}
+}
+
diff -ruN src-original/org/heml/sparql/LangPrefsOrder.java src/org/heml/sparql/LangPrefsOrder.java
--- src-original/org/heml/sparql/LangPrefsOrder.java	1969-12-31 20:00:00.000000000 -0400
+++ src/org/heml/sparql/LangPrefsOrder.java	2009-07-13 11:04:56.000000000 -0300
@@ -0,0 +1,37 @@
+package org.heml.sparql;
+
+import com.hp.hpl.jena.sparql.expr.ExprEvalException;
+import com.hp.hpl.jena.sparql.expr.NodeValue;
+import com.hp.hpl.jena.sparql.function.FunctionBase2;
+
+import com.hp.hpl.jena.graph.Node;
+
+/**
+ * Custom function to be used in SPARQL queries. Orders literals based on input
+ * language preferences. @see exec(NodeValue v, NodeValue langs).
+ */
+public class LangPrefsOrder extends FunctionBase2
+{	
+	public LangPrefsOrder(){}
+
+	/**
+	 * @param v A literal node with a language tag.
+	 * @param langs String representing preference of language. This must be a
+	 * string of language codes separated by a comma and 0 or more whitespace
+	 * characters. 
+	 */
+	public NodeValue exec(NodeValue v, NodeValue langs) {
+		
+		String[] langPrefs = langs.asString().split("\\s*,\\s*");
+
+		Node literal = NodeValue.toNode(v);
+
+		String value = v.asString();
+		for ( int i=0; i<langPrefs.length; i++){
+			if ( literal.getLiteralLanguage().equals(langPrefs[i])) 
+				return NodeValue.makeInteger(i);
+		}
+		return NodeValue.makeInteger(langPrefs.length);
+	}
+}
+
