This patch sets up Jena to automatically generate terminus post quem and
termuins ante quem tags for subjects tagged with simple dates as inserted into a
graph. This feature can be enabled and dissabled by calling
terminusInsertion( boolen enabled ) on your graph object. 

Note that this feature depends on your graph being an extension of the
GraphBase object, which is true for all graphs already in Jena.

Note also that this depends on an external jar file which handles the parsing of
these dates (cocoon-heml-block.jar) which must be placed in Jena's lib
directory.

Instructions to apply this patch:
  * Copy cocoon-heml-block.jar into Jena's lib directory
  * Copy this patch file into Jena's src directory
  * cd into Jena's src directory
  * run 'patch -p1 -i terminus.patch
  * cd into Jena's root directory and build jena (run 'ant')

Jena.jar will now be in Jena's lib folder.
diff -ruN src/com/hp/hpl/jena/graph/impl/GraphBase.java /home/ajwood/heml/dev/Jena-2.5.7/src/com/hp/hpl/jena/graph/impl/GraphBase.java
--- src/com/hp/hpl/jena/graph/impl/GraphBase.java	2009-06-30 09:39:05.000000000 -0300
+++ /home/ajwood/heml/dev/Jena-2.5.7/src/com/hp/hpl/jena/graph/impl/GraphBase.java	2009-06-30 10:20:46.000000000 -0300
@@ -6,6 +6,7 @@
 
 package com.hp.hpl.jena.graph.impl;
 
+import com.hp.hpl.jena.HemlConstants;
 import com.hp.hpl.jena.graph.*;
 import com.hp.hpl.jena.graph.query.*;
 import com.hp.hpl.jena.util.iterator.*;
@@ -42,6 +43,17 @@
     */
     protected boolean closed = false;
 
+	/**
+		 This listener watches for simple dates being inserted into the graph.
+		 It will try to parse out the date to generate terminus post quem (a
+		 start time, in milliseconds) and a terminus ante quem (an end time, in
+		 milliseconds) which is then inserted into the graph with
+		 &lt;http://www.heml.org/rdf/2003-09-17/heml#TerminusPostQuem&gt; and
+		 &lt;http://www.heml.org/rdf/2003-09-17/heml#TerminusAnteQuem&gt; acting
+		 as the predicate.
+	 */
+	protected final HemlDateListener terminusInsertListener;
+
     /**
          Initialise this graph as one with reification style Minimal.
     */
@@ -53,7 +65,11 @@
          the reifier when it is created).
     */
     public GraphBase( ReificationStyle style )
-        { this.style = style; }
+        { this.style = style; 
+			terminusInsertListener = new HemlDateListener();
+			if ( HemlConstants.includeTimeBounds )
+				getEventManager().register( terminusInsertListener );
+		}
         
     /**
          Utility method: throw a ClosedException if this graph has been closed.
@@ -199,7 +215,7 @@
         performAdd( t );
         notifyAdd( t );
         }
-    
+
     /**
          Add a triple to the triple store. The default implementation throws an
          AddDeniedException; subclasses must override if they want to be able to
@@ -436,6 +452,19 @@
 		return b.toString();
 	   }
 
+	/**
+		Enables/disables terminus post/ante quem tag generation for simple dates
+		on insert into this graph.
+	 */
+	public void terminusInsertion( boolean enabled ){
+		// We always unregister first to avoid unwanted multiplicities 
+		getEventManager().unregister( terminusInsertListener );
+
+		// Reregister if enabled
+		if ( enabled ) getEventManager().register( terminusInsertListener );
+	}
+
+
 }
 
 /*
diff -ruN src/com/hp/hpl/jena/graph/impl/HemlDateListener.java /home/ajwood/heml/dev/Jena-2.5.7/src/com/hp/hpl/jena/graph/impl/HemlDateListener.java
--- src/com/hp/hpl/jena/graph/impl/HemlDateListener.java	1969-12-31 20:00:00.000000000 -0400
+++ /home/ajwood/heml/dev/Jena-2.5.7/src/com/hp/hpl/jena/graph/impl/HemlDateListener.java	2009-06-26 18:33:51.000000000 -0300
@@ -0,0 +1,192 @@
+package com.hp.hpl.jena.graph.impl;
+
+import org.heml.chronology.parse.*;
+
+import com.hp.hpl.jena.graph.*;
+import com.hp.hpl.jena.datatypes.*;
+import java.util.List;
+import java.util.Iterator;
+
+/**
+ * When a date or time node appears as the object of a triple, we add 2 new
+ * triple with the same subject with predicates and objects representing the
+ * earliest and latest time of the interval described.
+ *<p>
+ * Currently, only implemented to really handle
+ * "http://www.w3.org/2001/XMLSchema#gYear",
+ * "http://www.w3.org/2001/XMLSchema#date", and
+ * "http://www.w3.org/2001/XMLSchema#dateTime" types.
+ */
+public class HemlDateListener implements GraphListener{
+
+	/** Change to true to see more debugging statements */
+	private final boolean debug = false;
+
+	public HemlDateListener() {}
+
+	/**
+	  Method called when a single triple has been added to the graph.
+	  */
+	public void notifyAddTriple( Graph g, Triple t ){
+		if ( t.getObject() instanceof Node_Literal ){
+			long earliest, latest;
+
+			Node_Literal object = (Node_Literal) t.getObject();
+
+			String value = object.getLiteralLexicalForm();
+			String dataType = object.getLiteralDatatypeURI();
+
+			if ( dataType == null || dataType.equals("") ) return;
+
+			if (dataType.equals("http://www.w3.org/2001/XMLSchema#gYear")) {
+				try {
+					Year yearParser = new Year();
+					earliest = yearParser.getEarliestTime(value);
+					latest = yearParser.getLatestTime(value);
+				} catch (Exception e) {
+					if (debug) System.err.println("Failed parsing #gYear: '" + value + "': "+e+"\nNo triples added");
+					return;
+				}
+			}
+			else if (dataType.equals("http://www.w3.org/2001/XMLSchema#date")) {
+				try {
+					earliest = Date.getEarliestTime(value);
+					latest = Date.getLatestTime(value);
+				} catch (Exception e) {
+					if (debug) System.err.println("Failed parsing #date: '" + value + "': "+e+"\nNo triples added");
+					return;
+				}
+			}
+			else if (dataType.equals("http://www.w3.org/2001/XMLSchema#dateTime")) {
+				try{
+					earliest = DateTime.getEarliestTime(value);
+					latest = DateTime.getLatestTime(value);
+				} catch (Exception e){
+					if (debug) System.err.println("exception trying to parse #dateTime: '" + value + "': " + e);
+					if (debug) System.err.println("out of despiration, we are going to append ':00' and reparse");
+					try{
+						earliest = DateTime.getEarliestTime(value);
+						latest = DateTime.getLatestTime(value);
+					} catch ( Exception e1 ){
+						if (debug) System.err.println("Failed parsing #dateTime: '"+value+"': " + e1 +"\nNo triples added");
+						return;
+					}
+				}
+			}
+			else{ // we have no idea what datatype this is
+				try {
+					earliest = DateTime.getEarliestTime(value);
+					latest = DateTime.getLatestTime(value);
+				} catch (Exception e) {
+					if (debug) System.err.println("Tried to parse '"+value+"' as datetime, but: " + e);
+					try {
+						if (debug) System.err.println ("appending ':00' and reparsing");
+						earliest = DateTime.getEarliestTime(value + ":00");
+						latest = DateTime.getLatestTime(value + ":00");
+					} catch (Exception e1) {
+						if (debug) System.err.println("that failed, too: " + e1);
+
+						try {
+							earliest = Date.getEarliestTime(value);
+							latest = Date.getLatestTime(value);
+						} catch (Exception e2) {
+							if (debug) System.err.println("Tried to parse '"+value+"' as date, but: " + e2);
+							try {
+								Year yearParser = new Year();
+								earliest = yearParser.getEarliestTime(value);
+								latest = yearParser.getLatestTime(value);
+							} catch (Exception e3) {
+								if (debug) System.err.println("Failed parsing date/time: '"+value+"': "+e3+"\nNo triples added");
+								return;
+							}
+						}
+					}
+				}
+			}
+
+			Node earliestNode = Node.createLiteral(
+					java.lang.Long.toString(earliest),
+					"", 
+					com.hp.hpl.jena.datatypes.xsd.XSDDatatype.XSDinteger);
+			Node latestNode = Node.createLiteral(
+					java.lang.Long.toString(latest),
+					"", 
+					com.hp.hpl.jena.datatypes.xsd.XSDDatatype.XSDinteger);
+
+			Node terminusPostQuem = Node.createURI(
+					"http://www.heml.org/rdf/2003-09-17/heml#TerminusPostQuem");
+			Node terminusAnteQuem = Node.createURI(
+					"http://www.heml.org/rdf/2003-09-17/heml#TerminusAnteQuem");
+
+			//unregister this from the event manager to avoid nasty recursion
+			g.getEventManager().unregister( this );
+			g.add( Triple.create(t.getSubject(), terminusPostQuem, earliestNode) );
+			g.add( Triple.create(t.getSubject(), terminusAnteQuem, latestNode) );
+			g.getEventManager().register( this );
+		}
+	}
+
+
+    /**
+        Method called when an array of triples has been added to the graph.
+    */
+    public void notifyAddArray( Graph g, Triple [] triples ){
+		for ( int i=0; i<triples.length; i++ ){
+			notifyAddTriple( g, triples[i] );
+		}
+	}
+    
+    /**
+        Method called when a list [of triples] has been added to the graph.
+    */
+    public void notifyAddList( Graph g, List triples ){
+		for ( int i=0; i<triples.size(); i++){
+			notifyAddTriple( g, (Triple)triples.get(i) );
+		}
+	}
+    
+    /**
+        Method called when an iterator [of triples] has been added to the graph
+    */
+    public void notifyAddIterator( Graph g, Iterator it ){}
+    
+    /**
+        Method called when another graph <code>g</code> has been used to
+        specify the triples added to our attached graph.
+    	@param g the graph of triples added
+     */
+    public void notifyAddGraph( Graph g, Graph added ){}
+    
+    /**
+        Method called when a single triple has been deleted from the graph.
+    */
+    public void notifyDeleteTriple( Graph g, Triple t ){}
+    
+    /**
+        Method called when a list [of triples] has been deleted from the graph.
+    */
+    public void notifyDeleteList( Graph g, List L ){}
+    
+    /**
+        Method called when an array of triples has been deleted from the graph.
+    */
+    public void notifyDeleteArray( Graph g, Triple [] triples ){}
+    
+    /**
+        Method called when an iterator [of triples] has been deleted from the graph.
+    */
+    public void notifyDeleteIterator( Graph g, Iterator it ){}
+    
+    /**
+        Method to call when another graph has been used to specify the triples 
+        deleted from our attached graph. 
+    	@param g the graph of triples added
+     */
+    public void notifyDeleteGraph( Graph g, Graph removed ){}
+    
+    /**
+         method to call for a general event
+     	@param value
+     */
+    public void notifyEvent( Graph source, Object value ){}
+}
diff -ruN src/com/hp/hpl/jena/HemlConstants.java /home/ajwood/heml/dev/Jena-2.5.7/src/com/hp/hpl/jena/HemlConstants.java
--- src/com/hp/hpl/jena/HemlConstants.java	1969-12-31 20:00:00.000000000 -0400
+++ /home/ajwood/heml/dev/Jena-2.5.7/src/com/hp/hpl/jena/HemlConstants.java	2009-06-30 09:24:34.000000000 -0300
@@ -0,0 +1,17 @@
+package com.hp.hpl.jena;
+
+/**
+ * This class contains constants used in various places in Jena which are
+ * specific to its use in HEML
+ */
+public class HemlConstants{
+
+	/** 
+	 * If true, when a date/time literal appears as the object in a triple
+	 * that is inserted into a graph, two more triples with the same subject and
+	 * predicate will be added, which represents the start/end times for the
+	 * interval represented in the original date/time literal.
+	 */
+	public static final boolean includeTimeBounds = true;
+
+}
