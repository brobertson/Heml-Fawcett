<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE html 

	PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"

	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
  <style>
  ul { font-size:18px; margin:0; }
  span { color:blue; text-decoration:underline; cursor:pointer; }
  .example { font-style:italic; }
  </style>
  <script src="http://code.jquery.com/jquery-latest.min.js"></script>
  	<script type="text/javascript" language="javascript" src="../javascript/hemlJsonQuery.js"/>
	<script type="text/javascript" language="javascript" src="../javascript/sparql.js"/>
  <script>
function onHemlFailure(reply) {
    alert("The Heml SPARQL query failed. Perhaps you do not have an Internet connection:\n" + reply);
    // do something more interesting, like putting an x through the map. or making
    // a popup
}
function onHemlSuccess(reply) {
	console.warn("You succeeded, and got " + reply.results.bindings[0].label.value);
}
	// function that takes URL and a language and returns the string in that language
function UrlToLang(url, lang) {
	var queryString = "select ?label where {"+url+" rdfs:label ?label. FILTER(lang(?label) = '"+lang+"')}LIMIT 1"
	hq = new Heml.SparqlQuery(endpoint, queryString, onHemlFailure, function (json){return json.results.bindings[0].label.value;});
	hq.performQuery();
	
	//check return
	}
	var x = 0; var y; var z = 0;
	var addA = true; var addW = true;
	var indexArr = new Array();
	var authArr = new Array();
	var workArr = new Array();
	var UrlToJson= new Array();

	var langArr = ['en','fr','it','ru','ja','zh','ar','de'];;
	var endpoint = "http://heml.mta.ca/sesame/openrdf-sesame/repositories/labels";
	// This is a sparql query that runs at the opening of this page. Set up with the variables and
    // functions above, right now all it does is grab the japanese for 'Aristotle' and pop an alert with the info.
    // It would be better if we got all the labels and then negotiated the right display in the client.
    // hq = new Heml.SparqlQuery(endpoint, queryString, onHemlFailure, onHemlSuccess);
    // hq.performQuery();
  </script>
</head>
<body>
	<p>This is just a paragraph that does nothing.</p>
	<p>the following is an actionable ctsurn (well, ok, it isn't, but it should be):</p>
	<p class="ctsurn">urn:cts:greekLit:tlg0532.tlg001</p>
	<p class="ctsurn">urn:cts:greekLit:tlg0003.tlg001</p>
	<p class="ctsurn">urn:cts:greekLit:tlg0003.tlg001</p>
	<p class="ctsurn">urn:cts:greekLit:tlg0007.tlg063</p>
	<p class="ctsurn">urn:cts:greekLit:tlg0007.tlg028</p>
	<p class="ctsurn">This is given 'ctsurn' class, but it cannot be acted upon.</p>
	<p class="ctsurn">urn:cts:greekLit:tlg0007.tlg025</p>
	<p class="ctsurn">urn:cts:greekLit:tlg0006.tlg011</p>
	<p class="ctsurn">This is given 'ctsurn' class, but it cannot be acted upon.</p>
<script>
//This script iterates through all the elements of the 'ctsurn' class
//then tries to parse their contents with the regex. The ideas is that the regex
// splits out the needed bits to make the query to the rdf label server.
	 $(document).ready(function () {
	  $(".ctsurn").each(function(index) {
		urn = $(this).text();
		myregexp =  /(\w+:cts:[A-Z]{4,}:([A-Z]{3}\d{4})\.([A-Z]{3}\d{3}))/i
		mymatch = myregexp.exec(urn);
		if(mymatch==null)
		{
			indexArr[index] = null;
		}
		else{
		indexArr[index]=mymatch[0];
		}
		if(mymatch!=null){
		var author ="&lt;http://heml.mta.ca/text/urn/"+mymatch[2]+">"; // author URL
		var work = "&lt;http://heml.mta.ca/text/urn/"+mymatch[2]+"/"+mymatch[3]+">"; // work URL

	
	// sucessfully adds the URLs to the appropriate arrays
	//check to see if author's already there, if so do not add author to array 
		for(y in authArr){
		if(authArr[y] == author)
		{addA = false
		}}
		if(addA){
		authArr[x]=author;
		var queryString2 = "select ?label where {"+authArr[x]+" rdfs:label ?label. FILTER(lang(?label) = 'en')}LIMIT 1"
		hq2 = new Heml.SparqlQuery(endpoint, queryString2, onHemlFailure, function (json){UrlToJson[author]= json;});
		hq2.performQuery();
		x++;
		}
		add = true;
	//check to see if work's already there, if so do not add work to array 
		for(y in workArr){
		if(workArr[y] == work)
		{addW = false
		}}
		console.warn(UrlToJson[author]);
		if(addW){
		workArr[z]=work;
		var queryString = "select ?label where {"+workArr[z]+" rdfs:label ?label. FILTER(lang(?label) = 'en')}LIMIT 1"
		hq = new Heml.SparqlQuery(endpoint, queryString, onHemlFailure, function (json){ UrlToJson[author]= json;});
		hq.performQuery();
		z++;
		}
		addA = addW = true;
	}	
	});
	});
	
</script>
</body>
</html>