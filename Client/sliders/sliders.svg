<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20001102//EN" "http://www.w3.org/TR/2000/CR-SVG-20001102/DTD/svg-20001102.dtd">
<svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" onload="Init(evt)" onmousedown="Grab(evt)" onmousemove="Drag(evt)" onmouseup="Drop(evt)" onclick = "Done(evt)">

 <title>Drag And Drop</title>

 <desc>Sliders to indicate location on a timeline
  Sarah Bell-Etkin for Heml-Fawcett, 2010
 </desc>

 <script><![CDATA[ 
  var SVGDocument = null;
  var SVGRoot = null;

  var TrueCoords = null;

  var DragTarget = null;
  var Left;
  var Right;
  var TLeft;
  var TRight;
  var Centre;
  var OldBound;
  var NowBound;
  var BackDrop;
  
  var lowBound;
  var highBound;
  var pixDistance;
  var scale;
  var ratio;
  var time;
  
  var leftVal = 440;
  var rightVal = 830;
  var leftie = 330;
  var rightie = 840;

  var LEFT_X = 50;     // pixels, need to figure out a way of moving bounds
  var RIGHT_X = 1220;  // pixels

  function Init(evt){
   SVGDocument = evt.target.ownerDocument;
   SVGRoot = SVGDocument.documentElement;
   StartTimeLine(-1500, 2010, 300, 1000);  // user input
  };

  function StartTimeLine(low, high, l, r){
   TrueCoords = SVGRoot.createSVGPoint();
   Left = SVGDocument.getElementById('LeftSlider');
   Right = SVGDocument.getElementById('RightSlider');
   TLeft = SVGDocument.getElementById('ChangeL');
   TRight = SVGDocument.getElementById('ChangeR');
   Centre = SVGDocument.getElementById('TextBox');
   OldBound = SVGDocument.getElementById('LeftBound');
   NowBound = SVGDocument.getElementById('RightBound');
   BackDrop = SVGDocument.getElementById('BackDrop');
   RPath = SVGDocument.getElementById('RPath');
   LPath = SVGDocument.getElementById('LPath');

   LEFT_X = l;
   RIGHT_X = r;

   LPath.setAttributeNS(null, 'x1', LEFT_X);
   LPath.setAttributeNS(null, 'x2', LEFT_X);
   OldBound.setAttributeNS(null, 'x', LEFT_X);

   RPath.setAttributeNS(null, 'x1', RIGHT_X);
   RPath.setAttributeNS(null, 'x2', RIGHT_X);
   NowBound.setAttributeNS(null, 'x', RIGHT_X);

   if(low <= high){
    lowBound = low;
    highBound = high;
   }
   else{
    lowBound = high;
    highBound = low;
   }

   SetBounds();
   FindPoints();
  };

  function SetBounds(){
   ChangeThing(lowBound, OldBound);
   ChangeThing(highBound, NowBound);
  };

  function FindPoints(){
   length = highBound - lowBound;
   temp = length / 3;
   startLeft = Math.round(lowBound + temp);
   startRight = Math.round(highBound - temp);
   mid = length / 2;
   midPoint = Math.round(highBound - mid);
   if(midPoint == 0){
    midPoint = 1;
   }
   ChangeThing(midPoint, Centre);
   ChangeThing(startLeft, TLeft);
   ChangeThing(startRight, TRight);
  };

  function ChangeThing(xVal, thing){
   if(xVal < 0){
    xVal = xVal * -1;
    newText = SVGDocument.createTextNode(xVal + ' BCE');
   }
   else{
    newText = SVGDocument.createTextNode(xVal + ' CE');
   }
   thing.replaceChild(newText, thing.firstChild);
  };

  function Grab(evt){
   var targetElement = evt.target;
   if(targetElement == Left || targetElement == Right){
    DragTarget = targetElement;
    DragTarget.parentNode.appendChild(DragTarget); // if this is gone, behaviour is different on the 2nd drag
    DragTarget.setAttributeNS(null, 'pointer-events', 'none');
   }
  };

  function Drag(evt){
   if(DragTarget){
    newX = CheckBounds(evt.clientX);
    if(DragTarget == Left){
     if(newX <= (rightVal - 10)){
      DragTarget.setAttributeNS(null, 'cx', newX);
      TLeft.setAttributeNS(null, 'x', newX);
      ChangeWords(evt.clientX, TLeft);
      leftVal = newX;
     }
    }
    else if(DragTarget == Right){
     if(newX >= (leftVal + 10)){
      DragTarget.setAttributeNS(null, 'cx', newX);
      TRight.setAttributeNS(null, 'x', newX);
      ChangeWords(evt.clientX, TRight);
      rightVal = newX;
     }
    }
   }
  };

  function Drop(evt){
   if(DragTarget){
    var targetElement = evt.target;
    DragTarget.setAttributeNS(null, 'pointer-events', 'all');
    DragTarget = null;
   }
  };

  function ChangeWords(xVal, slider){
   newVal = Scale(xVal);
   if(newVal < lowBound){	
    newVal = lowBound;
   }
   else if(newVal > highBound){
    newVal = highBound;
   }
   ChangeThing(newVal, slider);
   if(slider == TRight){
    rightie = newVal;
   }
   else if(slider == TLeft){
    leftie = newVal;
   }
  };

  function Scale(x){
   scale = highBound - lowBound;
   pixDistance = RIGHT_X - LEFT_X;
   ratio = (x - LEFT_X) / pixDistance;
   time = Math.round(ratio * scale) + lowBound;
   return time;
  };

  function CheckBounds(x){
   if(x <= LEFT_X){
    return LEFT_X;
   }
   else if(x >= RIGHT_X){
    return RIGHT_X;
   }
   return x;
  };

  function Done(evt){
   var targetElem = evt.target;
   DoneButton = SVGDocument.getElementById('Done');
   if(targetElem == DoneButton){
    StartTimeLine(leftie, rightie, LEFT_X, RIGHT_X);
   }
  };

 ]]></script>

 <rect id = "BackDrop" x = "-10%" y = "-10%" width = "110%" height = "110%" fill = "none" pointer-events = "all"/>

 <g id = "Left">
  <circle id = "LeftSlider" cx="440" cy="20%" r="10" style="fill: blue;" stroke="black" stroke-width="2"/>
  <text id = "ChangeL" x = "440" y = "30%" font-family = "sans-serif" font-weight = "bold" font-size = "12pt" text-anchor = "middle">Left</text>
 </g>

 <g id = "Right">
  <circle id="RightSlider" cx="830" cy="20%" r="10" style="fill: red;" stroke="black" stroke-width="2"/>
  <text id = "ChangeR" x = "830" y = "30%" font-family = "sans-serif" font-weight = "bold" font-size = "12pt" text-anchor = "middle">Right</text>
 </g> 
 
 <g id = "LBound" style = "font-family: sans-serif; font-weight: bold; font-size: 12pt">
  <text id = "LeftBound" x = "50" y = "60" text-anchor = "middle">Low Bound</text>
  <line id = "LPath" stroke-width = "5" stroke = "black" x1 = "50" y1 = "15%" x2 = "50" y2 = "25%"/>
 </g>

 <g id = "RBound" style = "font-family: sans-serif; font-weight: bold; font-size: 12pt"> >
  <text id = "RightBound" x = "1220" y = "60" text-anchor = "middle">Top Bound</text>
  <line id = "RPath" stroke-width = "5" stroke = "black" x1 = "1220" y1 = "15%" x2 = "1220" y2 = "25%"/>
 </g>

 <g id = "1Year" style = "font-family: sans-serif; font-weight: bold; font-size: 12pt">
  <text id = "TextBox" x = "635" y = "60" text-anchor = "middle">Centre</text>
  <line id = "MiddlePath" stroke-width = "5" stroke = "black" x1 = "635" y1 = "16%" x2 = "635" y2 = "24%"/>
 </g>

 <g id = "DB" style = "font-family: sans-serif; font-weight: bold; font-size: 12pt; text-anchor: middle">
  <rect id = "Done" x = "46%" y = "59%" width = "80" height = "40" fill = "aqua" stroke = "black" stroke-width = "2"/>
  <text id = "DoneText" x = "49%" y = "63%">Done</text>
 </g>

</svg>