<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20001102//EN" "http://www.w3.org/TR/2000/CR-SVG-20001102/DTD/svg-20001102.dtd">
<svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" onload="Init(evt)" onmousedown="Grab(evt)" onmousemove="Drag(evt)" onmouseup="Drop(evt)">

 <title>Drag And Drop</title>

 <desc>
  A nice little demo of drag-and-drop functionality in SVG,
  written by Doug Schepers on February 16, 2004.
  Use or misuse this code however you wish.
 </desc>

 <script><![CDATA[ 
  var SVGDocument = null;
  var SVGRoot = null;

  var TrueCoords = null;
  var GrabPoint = null;
  var BackDrop = null;
  var DragTarget = null;


  function Init(evt){
   SVGDocument = evt.target.ownerDocument;
   SVGRoot = SVGDocument.documentElement;

   // these svg points hold x and y values...
   //    very handy, but they do not display on the screen (just so you know)
   TrueCoords = SVGRoot.createSVGPoint();
   GrabPoint = SVGRoot.createSVGPoint();

   // this will serve as the canvas over which items are dragged.
   //    having the drag events occur on the mousemove over a backdrop
   //    (instead of the dragged element) prevents the dragged element 
   //    from being inadvertently dropped when the mouse is moved rapidly
   BackDrop = SVGDocument.getElementById('BackDrop');
   TextBox = SVGDocument.getElementById('TextBox');
   Left = SVGDocument.getElementById('ChangeL');
   Right = SVGDocument.getElementById('ChangeR');
   newText = SVGDocument.createTextNode("Well hey there!");
   Right.replaceChild(newText, Right.firstChild);
  }


  function Grab(evt){
   // find out which element we moused down on
   var targetElement = evt.target;

   // you cannot drag the background itself, so ignore any attempts to mouse down on it
   if ((BackDrop != targetElement) && (TextBox != targetElement) && (Left != targetElement) && (Right != targetElement)){
    //set the item moused down on as the element to be dragged
    DragTarget = targetElement;

    // move this element to the "top" of the display, so it is (almost)
    //    always over other elements (exception: in this case, elements that are
    //    "in the folder" (children of the folder group) with only maintain
    //    hierarchy within that group
    DragTarget.parentNode.appendChild( DragTarget );

    // turn off all pointer events to the dragged element, this does 2 things:
    //    1) allows us to drag text elements without selecting the text
    //    2) allows us to find out where the dragged element is dropped (see Drop)
    DragTarget.setAttributeNS(null, 'pointer-events', 'none');

    // we need to find the current position and translation of the grabbed element,
    //    so that we only apply the differential between the current location
    //    and the new location
    var transMatrix = DragTarget.getCTM();
    GrabPoint.x = TrueCoords.x - Number(transMatrix.e);
    
   }
  };


  function Drag(evt){
   // account for zooming and panning
   GetTrueCoords(evt);

   // if we don't currently have an element in tow, don't do anything
   if (DragTarget){
    // account for the offset between the element's origin and the
    //    exact place we grabbed it... this way, the drag will look more natural
    var newX = TrueCoords.x - GrabPoint.x;

    // apply a new tranform translation to the dragged element, to display
    //    it in its new location
    DragTarget.setAttributeNS(null, 'transform', 'translate(' + newX + ',' + 0 + ')');
    ChangeWords(newX);
   }
  };

 
  function Drop(evt){
   // if we aren't currently dragging an element, don't do anything
   if ( DragTarget ){
    // since the element currently being dragged has its pointer-events turned off,
    //    we are afforded the opportunity to find out the element it's being dropped on
    var targetElement = evt.target;

    // turn the pointer-events back on, so we can grab this item later
    DragTarget.setAttributeNS(null, 'pointer-events', 'all');
    // set the global variable to null, so nothing will be dragged until we
    //    grab the next element
    DragTarget = null;
   }
  };


  function GetTrueCoords(evt){
   // find the current zoom level and pan setting, and adjust the reported
   //    mouse position accordingly
   var newScale = SVGRoot.currentScale;
   var translation = SVGRoot.currentTranslate;
   TrueCoords.x = (evt.clientX - translation.x)/newScale;
  };


  function ChangeWords(xVal){
   Changeable = SVGDocument.getElementById('ChangeL');
     newText = SVGDocument.createTextNode(xVal);
   Changeable.replaceChild(newText, Changeable.firstChild);  
};

 ]]></script>

 <rect id="BackDrop" x="-10%" y="-10%" width="110%" height="110%" fill="none" pointer-events="all"/>

 <circle id="LeftSlider" cx="35%" cy="25%" r="15" style="fill: blue;" stroke="black" stroke-width="1"/>
 <circle id="RightSlider" cx="65%" cy="25%" r="15" style="fill: red;" stroke="black" stoke-width="2"/>
   
 <g style = "font-family: sans-serif; font-weight: bold; font-size: 12pt; text-anchor: middle">
  <text id = "TextBox" x = "50%" y = "60">Centre</text>
  <text id = "ChangeL" x = "35%" y = "35%">Left Tracer</text>
  <text id = "ChangeR" x = "65%" y = "35%">Right Tracer</text>
 </g>

</svg>
